{"version":3,"sources":["../src/selectedcourses.js"],"names":["SelectedCourses","contextId","requestId","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","modal","saveText","setLarge","setSaveButtonText","getRoot","on","ModalEvents","hidden","destroy","bind","setBody","getBody","requesid","save","submitForm","submitFormAjax","show","e","preventDefault","find","submit","formData","serialize","indexOf","customSelect","invalidText","addClass","attr","strings","then","string","empty","append","fail","Notification","exception","Ajax","call","methodname","args","requestid","done","data","warnings","length","handleFormSubmissionResponse","document","location","reload","Y","use","M","core_formchangechecker","reset_form_dirty_state","stringKeys","key","component","Str","get_strings","ModalFactory","create","type","types","SAVE_CANCEL","title","body","setupFormModal","showSelectedCoursesModal"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Selected courses.\n *\n * @module     tool_dataprivacy/selected_courses\n * @package    tool_dataprivacy\n * @copyright  2020 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as Str from 'core/str';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\n\n/**\n * Selected Courses popup modal.\n *\n */\nclass SelectedCourses {\n\n    /**\n     * Constructor\n     *\n     * @param {String} contextId Context ID to load the fragment.\n     * @param {String} requestId ID of data export request.\n     */\n    constructor(contextId, requestId) {\n\n        this.contextId = contextId;\n        this.requestId = requestId;\n\n        this.stringKeys = [\n            {\n                key: 'selectcourses',\n                component: 'tool_dataprivacy'\n            },\n            {\n                key: 'save',\n                component: 'admin'\n            },\n            {\n                key: 'errornoselectedcourse',\n                component: 'tool_dataprivacy'\n            }\n        ];\n        this.strings = Str.get_strings(this.stringKeys);\n\n        this.strings.then((strings) => {\n            return ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: strings[0],\n                body: '',\n            }).done((modal) => {\n                this.setupFormModal(modal, strings[1]);\n            });\n        }).fail(Notification.exception);\n    }\n\n    /**\n     * @var {String} contextId Context ID to load the fragment.\n     * @private\n     */\n    contextId = 0;\n\n    /**\n     * @var {String} requestId ID of data export request.\n     * @private\n     */\n    requestId = 0;\n\n    /**\n     * @var {Promise}\n     * @private\n     */\n    strings = null;\n\n    /**\n     * Get body of modal.\n     *\n     * @method getBody\n     * @param {Object} formdata\n     * @private\n     * @return {Promise}\n     */\n    getBody = (formdata) => {\n\n        let params = null;\n        if (typeof formdata !== \"undefined\") {\n            params = {jsonformdata: JSON.stringify(formdata)};\n        }\n        // Get the content of the modal.\n        return Fragment.loadFragment('tool_dataprivacy', 'selectcourses_form', this.contextId, params);\n    };\n\n    /**\n     * Setup and show modal.\n     *\n     * @method setupFormModal\n     * @param {Object} modal\n     * @param {String} saveText\n     * @private\n     */\n    setupFormModal = (modal, saveText) => {\n        // Forms are big, we want a big modal.\n        modal.setLarge();\n\n        modal.setSaveButtonText(saveText);\n\n        // We want to reset the form every time it is opened.\n        modal.getRoot().on(ModalEvents.hidden, this.destroy.bind(this));\n\n        modal.setBody(this.getBody({requesid: this.requestId}));\n\n        // We catch the modal save event, and use it to submit the form inside the modal.\n        // Triggering a form submission will give JS validation scripts a chance to check for errors.\n        modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n        // We also catch the form submit event and use it to submit the form with ajax.\n        modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n        this.modal = modal;\n\n        modal.show();\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    submitForm = (e) => {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    /**\n     * Submit select courses form using ajax.\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    submitFormAjax = (e) => {\n\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        let formData = this.modal.getRoot().find('form').serialize();\n\n        if (formData.indexOf('coursecontextids') === -1) {\n            let customSelect = this.modal.getRoot().find('.custom-select');\n            let invalidText = this.modal.getRoot().find('.invalid-feedback');\n            $(customSelect).addClass('is-invalid');\n            $(invalidText).attr('style', 'display: block');\n            this.strings.then((string) => {\n                $(invalidText).empty().append(string[2]);\n                return;\n            }).fail(Notification.exception);\n            return;\n        }\n\n        Ajax.call([{\n            methodname: 'tool_dataprivacy_submit_selected_courses_form',\n            args: {requestid: this.requestId, jsonformdata: JSON.stringify(formData)},\n            done: (data) => {\n                if (data.warnings.length > 0) {\n                    this.modal.setBody(this.getBody(formData));\n                } else {\n                    this.handleFormSubmissionResponse();\n                }\n            },\n            fail: Notification.exception\n        }]);\n    };\n\n    /**\n     * Reload page when submission is successful.\n     *\n     * @method handleFormSubmissionResponse\n     * @private\n     */\n    handleFormSubmissionResponse = () => {\n        this.destroy();\n        document.location.reload();\n    };\n\n    /**\n     * Reset form when modal is hidden.\n     *\n     * @method destroy\n     * @private\n     */\n    destroy = () => {\n        Y.use('moodle-core-formchangechecker', () => {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        this.modal.destroy();\n    };\n}\n\n/**\n * Get instance of tool_dataprivacy/selected_courses\n *\n * @param {String} contextId contextId Context ID to load the fragment.\n * @param {String} requestId ID of data export request.\n * @return {SelectedCourses} the SelectedCourses instance.\n */\nexport const showSelectedCoursesModal = (contextId, requestId) => {\n    return new SelectedCourses(contextId, requestId);\n};\n"],"file":"selectedcourses.min.js"}